import CITS2200.Overflow;
import CITS2200.Stack;
import CITS2200.Underflow;

public class StackBlock implements Stack {
	Object[] stack; // Represents stack
	int size; // Represents size of stack
	
	/**
	 * An array that we have taken some functionality from so that it acts as a stack to the user.
	 * @param s size of StackBlock
	 */
	public StackBlock(int s) {
		stack = new Object[s];
		size = 0; 
	}

	/**
	 * examine() is a function that looks at the top element of the stack, and throws an exception if the stack is empty
	 * @return gives you a peek at the object on top of the stack
	 */
	public Object examine() throws Underflow {
		if (isEmpty()) {
			throw new Underflow("The stack is empty and thus you cannot examine anything");
		} else {
			return stack[size];
		}
	}

	/**
	 * isEmpty() is a function that checks if the stack is empty by seeing if the first element of the array has an object
	 * @return if the stack is empty
	 */
	public boolean isEmpty() {
		if (size==0) {
			return true;
		} else {
			return false;
		}
	}
	
	/**
	 * isFull() is a function that checks if the stack is full by seeing if the last element of the array has an object
	 * @return if the stack is full
	 */
	public boolean isFull() {
		if (size==(stack.length-1)) {
			return true;
		} else {
			return false;
		}
	}

	/**
	 * pop() is a function that yoinks the top value off the stack and serves it to you on a hot platter
	 * @return gives you the object on top of the stack
	 */
	public Object pop() throws Underflow {
		if (isEmpty()) {
			throw new Underflow("You cant pop from an empty stack, silly.");
		}
		Object popable = stack[size];
		size -= 1;
		return popable;
	}

	/**
	 * push(Object o) puts the object o on top of the stack
	 * @param o the object you wish to put on the stack
	 */
	public void push(Object o) throws Overflow {
		if(!isFull()) {
			size++;
			stack[size] = o;
		} else {
			throw new Overflow("Im too full, not more please sir");
		}
		
		
	}

}
